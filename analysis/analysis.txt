Rackeb Mered
rm334
Avery Brown 
amb222


StringBuilderStrand"
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.035	1290
StringBuilderStrand:	            512	      4,965,591	0.027	1290
StringBuilderStrand:	          1,024	      5,295,831	0.012	1290
StringBuilderStrand:	          2,048	      5,956,311	0.012	1290
StringBuilderStrand:	          4,096	      7,277,271	0.007	1290
StringBuilderStrand:	          8,192	      9,919,191	0.011	1290
StringBuilderStrand:	         16,384	     15,203,031	0.017	1290
StringBuilderStrand:	         32,768	     25,770,711	0.015	1290
StringBuilderStrand:	         65,536	     46,906,071	0.038	1290
StringBuilderStrand:	        131,072	     89,176,791	0.111	1290
StringBuilderStrand:	        262,144	    173,718,231	0.162	1290
StringBuilderStrand:	        524,288	    342,801,111	0.475	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3744)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:146)
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:512)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:141)
	at StringBuilderStrand.append(StringBuilderStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:41)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:67)
	at DNABenchmark.main(DNABenchmark.java:113)

Linkstrand 

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.028	1290
LinkStrand:	            512	      4,965,591	0.025	1290
LinkStrand:	          1,024	      5,295,831	0.003	1290
LinkStrand:	          2,048	      5,956,311	0.006	1290
LinkStrand:	          4,096	      7,277,271	0.011	1290
LinkStrand:	          8,192	      9,919,191	0.004	1290
LinkStrand:	         16,384	     15,203,031	0.008	1290
LinkStrand:	         32,768	     25,770,711	0.006	1290
LinkStrand:	         65,536	     46,906,071	0.004	1290
LinkStrand:	        131,072	     89,176,791	0.004	1290
LinkStrand:	        262,144	    173,718,231	0.003	1290
LinkStrand:	        524,288	    342,801,111	0.007	1290
LinkStrand:	      1,048,576	    680,966,871	0.004	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.008	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.004	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.005	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.007	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.005	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.006	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.006	1290
LinkStrand:	    268,435,456	173,145,504,471	0.008	1290
LinkStrand:	    536,870,912	346,286,373,591	0.041	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3744)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:146)
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:512)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:141)
	at DNABenchmark.main(DNABenchmark.java:110)


Stringstrand 
dna length = 4,639,221
cutting at enzyme gaattc
-----
dna length = 4,639,221
cutting at enzyme gaattc
-----Li
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.415	1290
StringStrand:	            512	      4,965,591	0.416	1290
StringStrand:	          1,024	      5,295,831	0.436	1290
StringStrand:	          2,048	      5,956,311	0.507	1290
StringStrand:	          4,096	      7,277,271	0.606	1290
StringStrand:	          8,192	      9,919,191	0.855	1290
StringStrand:	         16,384	     15,203,031	1.304	1290
StringStrand:	         32,768	     25,770,711	2.356	1290
StringStrand:	         65,536	     46,906,071	4.809	1290
StringStrand:	        131,072	     89,176,791	11.330	1290
StringStrand:	        262,144	    173,718,231	25.840	1290
StringStrand:	        524,288	    342,801,111	43.732	1290
StringStrand:	      1,048,576	    680,966,871	79.846	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at StringStrand.append(StringStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:37)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:67)
	at DNABenchmark.main(DNABenchmark.java:113)

Question 1: Are the benchmark timings for StringStrand consistent with the explanation below that the time to execute cutAndSplice is O(b2S)? 
answer: Usually when the length of splice doubles, the time also doubles. However, as evident in the timings, this holds true for larger strands but does not run as we expected for smaller ones. (This could be because the program needs time to get started) 
It is consistent with the O(b^2S) complexity idea, however, because in this case you are appending each single letter at a time (concatenating using .amends) B is constant and is the number of occurrences of the enzyme in the splice. 

Question 2: Are the benchmark timings for StringBuilderStrand consistent with the explanation below that the time to execute cutAndSplice is O(bS)? 
answer: Again, usually when the length of the splice doubles, time also double are consistent with StringBuilderStrand times  but this relationship does not hold true for the smaller values.  It is consistent with the o(bS) complexity because in this case each strand that is being added in is all at once, one time (rather than the example above where each individual letter is appended which makes it much slower)) b is constant and is the number of occurrences in the splice 
b again is constant and represents the number of occurrences. 

Question 3: The Linked list does not change much because when you add to a section in the linked list, it is O(1). This means that it is not affected by the size of what is being added. 
In this case, the pointing of the nodes is changing. The node pointing to the section before the insert now points to the inserted node and the inserted node now points to the node after. 
LinkedStrand saves a great amount of memory because the spice is in one single string which has the appended nodes pointing to this same string. In the other two, a new string is made for each appending. 
Questions here will come from the assignment
writeup. Be sure to copy paste questions and 
your explanations before you push to GitHub and
do that before uploading to Gradescope